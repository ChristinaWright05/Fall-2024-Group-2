effect_data <- data.frame(
Effect_Name = c("Detour", "Delay", "Escalator Closure", "Elevator Closure", "Track Change"),
Severity_Code = c(6.33, 4.97, 2.99, 2.97, 1.65)
)
# Create the bar chart
ggplot(effect_data, aes(x = reorder(Effect_Name, -Severity_Code), y = Severity_Code, fill = Effect_Name)) +
geom_bar(stat = "identity") +
labs(title = "Top 5 Effect Names and Their Severity Code",
x = "Effect Name",
y = "Average Severity Code") +
theme_minimal()
service_alerts <- service_alerts %>%
mutate(notif_start = as.Date(notif_start),  # Convert notif_start to Date
month = floor_date(notif_start, "month"))  # Extract month for aggregation
# Top Alert Frequency
top_alert_types <- service_alerts %>%
count(effect_name) %>%
arrange(desc(n)) %>%
slice(1:5) %>%
pull(effect_name)
# Only Top Alerts
filtered_alerts <- service_alerts %>%
filter(effect_name %in% top_alert_types)
# Top Alert Count
monthly_alerts <- filtered_alerts %>%
group_by(month, effect_name) %>%
summarise(alert_count = n(), .groups = "drop")
# PAST 3 Years
start_date <- as.Date("2021-01-01")
monthly_alerts <- monthly_alerts %>% filter(month >= start_date)
#VIZ
ggplot(monthly_alerts, aes(x = month, y = alert_count, fill = effect_name)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Monthly Frequency of All Top Alert Types (Last 3 Years)",
x = "Month",
y = "Alert Frequency",
fill = "Alert Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
severity_type <- unique(service_alerts$alert_time_type)
severity_counts <- service_alerts %>%
count(alert_time_type, name = "frequency")
ggplot(severity_counts, aes(x = severity_type, y = frequency,  fill= severity_type))+
geom_bar(stat = "Identity", fill = "skyblue", color = "white") +
labs( title = "Count of Alert Time Type 2023", x = "Alter Time Type", y = "Count")+
scale_y_continuous(labels = scales::label_number()) +
theme_minimal()
str(service_alerts)
View(severity_counts)
View(summary_stats)
View(data_2021)
View(data_2022)
View(data_2023)
View(effect_data)
View(Alerts_Ridership_BySubwayLine)
View(summary_stats)
View(T_line_ridership)
View(top_effects_data)
ggplot(T_line_ridership, aes(x = reorder(route_or_line, -total_gateentries), y = total_gateentries, fill = route_or_line)) +
geom_bar(stat = "identity") +
labs(
title = "Total Ridership by MBTA T Line",
x = "T Line",
y = "Total Gated Entries") +
scale_y_log10()+
theme_minimal() +
theme(legend.position = "none")
ggplot(T_line_ridership, aes(x = reorder(route_or_line, -total_gateentries), y = total_gateentries, fill = route_or_line)) +
geom_bar(stat = "identity") +
labs(
title = "Total Ridership by MBTA T Line",
x = "T Line",
y = "Total Gated Entries") +
theme_minimal() +
theme(legend.position = "none")
```
View(top_effects_data)
View(filtered_alerts)
severity_type <- unique(severity_counts$alert_time_type)
severity_counts <- service_alerts %>%
count(alert_time_type, name = "frequency")
ggplot(severity_counts, aes(x = severity_type, y = frequency,  fill= severity_type))+
geom_bar(stat = "Identity", fill = "skyblue", color = "white") +
labs( title = "Count of Alert Time Type 2023", x = "Alert Time Type", y = "Count")+
scale_y_continuous(labels = scales::label_number()) +
theme_minimal()
View(data_2021)
View(filtered_service_alerts)
View(severity_counts)
View(T_line_ridership)
View(data_2021)
View(top_effects_data)
View(aggregated_service_alerts)
View(Alerts_Ridership_BySubwayLine)
View(effect_data)
View(effect_data)
View(filtered_alerts)
View(T_line_ridership)
View(Ridership_3yeardata)
View(data_2023)
View(Alerts_Ridership_BySubwayLine)
View(aggregated_Ridership_data)
View(average_severity)
View(effect_data)
View(filtered_alerts)
View(monthly_alerts)
View(service_alerts)
data_2023 <- data_2023 %>% mutate(Year = 2023)
data_2022 <- data_2022 %>% mutate(Year = 2022)
data_2021 <- data_2024 %>% mutate(Year = 2021)
data_2023 <- data_2023 %>% mutate(Year = 2023)
data_2022 <- data_2022 %>% mutate(Year = 2022)
data_2021 <- data_2021 %>% mutate(Year = 2021)
View(service_alerts)
View(filtered_service_alerts)
View(T_line_ridership)
View(top_effects_data)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE) # set this so that warnings do not print along with our output
# first load libraries
library(readr)
library(dplyr)
library(psych)
library(ggplot2)
library(lubridate)
# upload each file by year - change paths as applicable
file_2023 <- "C:/Users/Brian/OneDrive/Desktop/MSAE/Software for Data Analysis/Group Project MBTA/GSE_by_year/GSE_2023.csv"
file_2022 <- "C:/Users/Brian/OneDrive/Desktop/MSAE/Software for Data Analysis/Group Project MBTA/GSE_by_year/GSE_2022.csv"  # Update this path to where you have saved the file
file_2021 <- "C:/Users/Brian/OneDrive/Desktop/MSAE/Software for Data Analysis/Group Project MBTA/GSE_by_year/GSE_2021.csv"  # Update this path to where you have saved the file
# import the data
data_2023 <- read_csv(file_2023, show_col_types = FALSE)
data_2022 <- read_csv(file_2022, show_col_types = FALSE)
data_2021 <- read_csv(file_2021, show_col_types = FALSE)
# add a column to each dataset for the corresponding year
data_2023 <- data_2023 %>% mutate(Year = 2023)
data_2022 <- data_2022 %>% mutate(Year = 2022)
data_2021 <- data_2021 %>% mutate(Year = 2021)
# combine
Ridership_3yeardata <- bind_rows(data_2021, data_2022, data_2023)
# preview the first 10 rows of the dataset
head(Ridership_3yeardata, 10)
# Summary statistics
summary_stats <- describe(Ridership_3yeardata)
# only stats I want to print
summary_stats <- summary_stats[, c("n", "mean", "sd" ,"max", "min")]
print(summary_stats)
Ridership_3yeardata <- Ridership_3yeardata %>%
mutate(service_date = as.Date(service_date),
gated_entries = ifelse(gated_entries < 0, NA, gated_entries))  # Replace negative entries with NA
Ridership_3yeardata <- Ridership_3yeardata %>%
mutate(service_date = as.Date(service_date),  # Convert notif_start to Date
month = floor_date(service_date, "month"),
year = floor_date(service_date, "year") )  # Extract month for aggregation
# change path when downloaded to the location of the dataset
service_alerts <- read_csv('/Users/christinawright/Documents/Fall 2024 Datasets/MBTA_Service_Alerts.csv', show_col_types = FALSE)
# change path when downloaded to the location of the dataset
service_alerts <- read_csv("C:/Users/Brian/OneDrive/Desktop/MSAE/Software for Data Analysis/Group Project MBTA/MBTA_Service_Alerts.csv", show_col_types = FALSE)
# preview the first 10 rows of the dataset
head(service_alerts, 10)
service_alerts <- service_alerts %>%
mutate(notif_start = as.Date(notif_start),  # Convert notif_start to Date
month = floor_date(notif_start, "month"),
year = floor_date(notif_start, "year") )  # Extract month for aggregation
summary_stats <- describe(service_alerts)
# only stats I want to print
summary_stats <- summary_stats[, c("n", "mean", "sd" ,"max", "min")]
print(summary_stats)
# Extract the color before "line"
Ridership_3yeardata$SubwayLine <- toupper(sub(" Line", "", Ridership_3yeardata$route_or_line))
filtered_service_alerts <- service_alerts %>%
filter(gui_mode_name == "Subway" & year(service_alerts$notif_start) %in% c(2021,2022, 2023))
# Add a column for each color with boolean 1 or 0 based on whether the description contains the color and "experiencing"
filtered_service_alerts$IsGreenLine <- ifelse(filtered_service_alerts$color == '00843D', 1, 0)
filtered_service_alerts$IsRedLine <- ifelse(filtered_service_alerts$color == 'DA291C', 1, 0)
filtered_service_alerts$IsBlueLine <- ifelse(filtered_service_alerts$color == '003DA5', 1, 0)
filtered_service_alerts$IsOrangeLine <- ifelse(filtered_service_alerts$color == 'ED8B00', 1, 0)
filtered_service_alerts$year = year(filtered_service_alerts$notif_start)
filtered_service_alerts$month = month(filtered_service_alerts$notif_start)
aggregated_service_alerts <- filtered_service_alerts %>%
mutate(SubwayLine = case_when(
IsGreenLine == 1 ~ "GREEN",
IsRedLine == 1 ~ "RED",
IsBlueLine == 1 ~ "BLUE",
IsOrangeLine == 1 ~ "ORANGE",
TRUE ~ NA_character_ # If none of the conditions match
)) %>%
group_by(year, month, SubwayLine) %>%
summarise(
distinct_alert_count = n_distinct(alert_id),  # Count distinct alert_ids
avg_severity = mean(severity_code, na.rm = TRUE),  # Calculate average severity
.groups = "drop"
)
# Aggregate by year, month, and color, summing the gated_entries
aggregated_Ridership_data <- Ridership_3yeardata %>%
group_by(Year, month, SubwayLine) %>%
summarise(
total_gated_entries = sum(gated_entries, na.rm = TRUE),
.groups = "drop"
)
aggregated_Ridership_data$month = month(aggregated_Ridership_data$month)
aggregated_Ridership_data$year = (aggregated_Ridership_data$Year)
Alerts_Ridership_BySubwayLine <- inner_join(aggregated_Ridership_data, aggregated_service_alerts,
by = c("year", "month", "SubwayLine"))
# preview the first 10 rows of the dataset
# Drop the duplicate 'Year' column
Alerts_Ridership_BySubwayLine <- Alerts_Ridership_BySubwayLine %>%
select(-Year)
head(Alerts_Ridership_BySubwayLine, 10)
# aggregate the data bythe T line variable, route_or_line
T_line_ridership <- Ridership_3yeardata %>%
group_by(route_or_line) %>%
summarize(total_gateentries = sum(gated_entries, na.rm = TRUE))
# plot the sum of entries by T line
ggplot(T_line_ridership, aes(x = reorder(route_or_line, -total_gateentries), y = total_gateentries, fill = route_or_line)) +
geom_bar(stat = "identity") +
labs(
title = "Total Ridership by MBTA T Line",
x = "T Line",
y = "Total Gated Entries"
) +
theme_minimal() +
theme(legend.position = "none")
# adding in a 'month' column based off the service_date
Ridership_3yeardata <- Ridership_3yeardata %>%
mutate(month = floor_date(service_date, "month"))
# agreagte the data by month
monthly_ridership <- Ridership_3yeardata %>%
group_by(month) %>%
summarize(total_gateentries = sum(gated_entries, na.rm = TRUE))
# plotting the total ridership over time by month
ggplot(monthly_ridership, aes(x = month, y = total_gateentries)) +
geom_line(color = "blue", size = 1) +
scale_x_date(
date_labels = "%b %Y",  # month year x-axis labels
date_breaks = "1 month" # adding month grid lines for readability
) +
labs(
title = "Monthly Total Ridership Over Time",
x = "Month",
y = "Total Gated Entries"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Find the 5 most frequent effect types
top_effects <- service_alerts %>%
count(effect_name) %>%
top_n(5, wt = n) %>%
pull(effect_name)
# Calculate the average severity code for all top 5 effects
top_effects_data <- subset(service_alerts, effect_name %in% top_effects)
# Group and calculate the average severity code
average_severity <- top_effects_data %>%
group_by(effect_name) %>%
summarise(average_severity = mean(severity_code, na.rm = TRUE))
print(average_severity)
# Data for visualization
effect_data <- data.frame(
Effect_Name = c("Detour", "Delay", "Escalator Closure", "Elevator Closure", "Track Change"),
Severity_Code = c(6.33, 4.97, 2.99, 2.97, 1.65)
)
# Create the bar chart
ggplot(effect_data, aes(x = reorder(Effect_Name, -Severity_Code), y = Severity_Code, fill = Effect_Name)) +
geom_bar(stat = "identity") +
labs(title = "Top 5 Effect Names and Their Severity Code",
x = "Effect Name",
y = "Average Severity Code") +
theme_minimal()
service_alerts <- service_alerts %>%
mutate(notif_start = as.Date(notif_start),  # Convert notif_start to Date
month = floor_date(notif_start, "month"))  # Extract month for aggregation
# Top Alert Frequency
top_alert_types <- service_alerts %>%
count(effect_name) %>%
arrange(desc(n)) %>%
slice(1:5) %>%
pull(effect_name)
# Only Top Alerts
filtered_alerts <- service_alerts %>%
filter(effect_name %in% top_alert_types)
# Top Alert Count
monthly_alerts <- filtered_alerts %>%
group_by(month, effect_name) %>%
summarise(alert_count = n(), .groups = "drop")
# PAST 3 Years
start_date <- as.Date("2021-01-01")
monthly_alerts <- monthly_alerts %>% filter(month >= start_date)
#VIZ
ggplot(monthly_alerts, aes(x = month, y = alert_count, fill = effect_name)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Monthly Frequency of All Top Alert Types (Last 3 Years)",
x = "Month",
y = "Alert Frequency",
fill = "Alert Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
severity_type <- unique(service_alerts$alert_time_type)
severity_counts <- service_alerts %>%
count(alert_time_type, name = "frequency")
ggplot(severity_counts, aes(x = severity_type, y = frequency,  fill= severity_type))+
geom_bar(stat = "Identity", fill = "skyblue", color = "white") +
labs( title = "Count of Alert Time Type 2023", x = "Alter Time Type", y = "Count")+
scale_y_continuous(labels = scales::label_number()) +
theme_minimal()
View(aggregated_Ridership_data)
View(aggregated_service_alerts)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE) # set this so that warnings do not print along with our output
# first load libraries
library(readr)
library(dplyr)
library(psych)
library(ggplot2)
library(lubridate)
# upload each file by year - change paths as applicable
file_2023 <- "C:/Users/Brian/OneDrive/Desktop/MSAE/Software for Data Analysis/Group Project MBTA/GSE_by_year/GSE_2023.csv"
file_2022 <- "C:/Users/Brian/OneDrive/Desktop/MSAE/Software for Data Analysis/Group Project MBTA/GSE_by_year/GSE_2022.csv"  # Update this path to where you have saved the file
file_2021 <- "C:/Users/Brian/OneDrive/Desktop/MSAE/Software for Data Analysis/Group Project MBTA/GSE_by_year/GSE_2021.csv"  # Update this path to where you have saved the file
# import the data
data_2023 <- read_csv(file_2023, show_col_types = FALSE)
data_2022 <- read_csv(file_2022, show_col_types = FALSE)
data_2021 <- read_csv(file_2021, show_col_types = FALSE)
# add a column to each dataset for the corresponding year
data_2023 <- data_2023 %>% mutate(Year = 2023)
data_2022 <- data_2022 %>% mutate(Year = 2022)
data_2021 <- data_2024 %>% mutate(Year = 2021)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE) # set this so that warnings do not print along with our output
# first load libraries
library(readr)
library(dplyr)
library(psych)
library(ggplot2)
library(lubridate)
# upload each file by year - change paths as applicable
file_2023 <- "C:/Users/Brian/OneDrive/Desktop/MSAE/Software for Data Analysis/Group Project MBTA/GSE_by_year/GSE_2023.csv"
file_2022 <- "C:/Users/Brian/OneDrive/Desktop/MSAE/Software for Data Analysis/Group Project MBTA/GSE_by_year/GSE_2022.csv"  # Update this path to where you have saved the file
file_2021 <- "C:/Users/Brian/OneDrive/Desktop/MSAE/Software for Data Analysis/Group Project MBTA/GSE_by_year/GSE_2021.csv"  # Update this path to where you have saved the file
# import the data
data_2023 <- read_csv(file_2023, show_col_types = FALSE)
data_2022 <- read_csv(file_2022, show_col_types = FALSE)
data_2021 <- read_csv(file_2021, show_col_types = FALSE)
# add a column to each dataset for the corresponding year
data_2023 <- data_2023 %>% mutate(Year = 2023)
data_2022 <- data_2022 %>% mutate(Year = 2022)
data_2021 <- data_2021 %>% mutate(Year = 2021)
# combine
Ridership_3yeardata <- bind_rows(data_2021, data_2022, data_2023)
# preview the first 10 rows of the dataset
head(Ridership_3yeardata, 10)
# Summary statistics
summary_stats <- describe(Ridership_3yeardata)
# only stats I want to print
summary_stats <- summary_stats[, c("n", "mean", "sd" ,"max", "min")]
print(summary_stats)
Ridership_3yeardata <- Ridership_3yeardata %>%
mutate(service_date = as.Date(service_date),
gated_entries = ifelse(gated_entries < 0, NA, gated_entries))  # Replace negative entries with NA
Ridership_3yeardata <- Ridership_3yeardata %>%
mutate(service_date = as.Date(service_date),  # Convert notif_start to Date
month = floor_date(service_date, "month"),
year = floor_date(service_date, "year") )  # Extract month for aggregation
# change path when downloaded to the location of the dataset
service_alerts <- read_csv('C:/Users/Brian/OneDrive/Desktop/MSAE/Software for Data Analysis/Group Project MBTA/MBTA_Service_Alerts.csv', show_col_types = FALSE)
# preview the first 10 rows of the dataset
head(service_alerts, 10)
service_alerts <- service_alerts %>%
mutate(notif_start = as.Date(notif_start),  # Convert notif_start to Date
month = floor_date(notif_start, "month"),
year = floor_date(notif_start, "year") )  # Extract month for aggregation
summary_stats <- describe(service_alerts)
# only stats I want to print
summary_stats <- summary_stats[, c("n", "mean", "sd" ,"max", "min")]
print(summary_stats)
# Extract the color before "line"
Ridership_3yeardata$SubwayLine <- toupper(sub(" Line", "", Ridership_3yeardata$route_or_line))
filtered_service_alerts <- service_alerts %>%
filter(gui_mode_name == "Subway" & year(service_alerts$notif_start) %in% c(2021,2022, 2023))
# Add a column for each color with boolean 1 or 0 based on whether the description contains the color and "experiencing"
filtered_service_alerts$IsGreenLine <- ifelse(filtered_service_alerts$color == '00843D', 1, 0)
filtered_service_alerts$IsRedLine <- ifelse(filtered_service_alerts$color == 'DA291C', 1, 0)
filtered_service_alerts$IsBlueLine <- ifelse(filtered_service_alerts$color == '003DA5', 1, 0)
filtered_service_alerts$IsOrangeLine <- ifelse(filtered_service_alerts$color == 'ED8B00', 1, 0)
filtered_service_alerts$year = year(filtered_service_alerts$notif_start)
filtered_service_alerts$month = month(filtered_service_alerts$notif_start)
aggregated_service_alerts <- filtered_service_alerts %>%
mutate(SubwayLine = case_when(
IsGreenLine == 1 ~ "GREEN",
IsRedLine == 1 ~ "RED",
IsBlueLine == 1 ~ "BLUE",
IsOrangeLine == 1 ~ "ORANGE",
TRUE ~ NA_character_ # If none of the conditions match
)) %>%
group_by(year, month, SubwayLine) %>%
summarise(
distinct_alert_count = n_distinct(alert_id),  # Count distinct alert_ids
avg_severity = mean(severity_code, na.rm = TRUE),  # Calculate average severity
.groups = "drop"
)
# Aggregate by year, month, and color, summing the gated_entries
aggregated_Ridership_data <- Ridership_3yeardata %>%
group_by(Year, month, SubwayLine) %>%
summarise(
total_gated_entries = sum(gated_entries, na.rm = TRUE),
.groups = "drop"
)
aggregated_Ridership_data$month = month(aggregated_Ridership_data$month)
aggregated_Ridership_data$year = (aggregated_Ridership_data$Year)
Alerts_Ridership_BySubwayLine <- inner_join(aggregated_Ridership_data, aggregated_service_alerts,
by = c("year", "month", "SubwayLine"))
# preview the first 10 rows of the dataset
# Drop the duplicate 'Year' column
Alerts_Ridership_BySubwayLine <- Alerts_Ridership_BySubwayLine %>%
select(-Year)
head(Alerts_Ridership_BySubwayLine, 10)
# aggregate the data bythe T line variable, route_or_line
T_line_ridership <- Ridership_3yeardata %>%
group_by(route_or_line) %>%
summarize(total_gateentries = sum(gated_entries, na.rm = TRUE))
# plot the sum of entries by T line
ggplot(T_line_ridership, aes(x = reorder(route_or_line, -total_gateentries), y = total_gateentries, fill = route_or_line)) +
geom_bar(stat = "identity") +
labs(
title = "Total Ridership by MBTA T Line",
x = "T Line",
y = "Total Gated Entries"
) +
theme_minimal() +
theme(legend.position = "none")
# adding in a 'month' column based off the service_date
Ridership_3yeardata <- Ridership_3yeardata %>%
mutate(month = floor_date(service_date, "month"))
# agreagte the data by month
monthly_ridership <- Ridership_3yeardata %>%
group_by(month) %>%
summarize(total_gateentries = sum(gated_entries, na.rm = TRUE))
# plotting the total ridership over time by month
ggplot(monthly_ridership, aes(x = month, y = total_gateentries)) +
geom_line(color = "blue", size = 1) +
scale_x_date(
date_labels = "%b %Y",  # month year x-axis labels
date_breaks = "1 month" # adding month grid lines for readability
) +
labs(
title = "Monthly Total Ridership Over Time",
x = "Month",
y = "Total Gated Entries"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Find the 5 most frequent effect types
top_effects <- service_alerts %>%
count(effect_name) %>%
top_n(5, wt = n) %>%
pull(effect_name)
# Calculate the average severity code for all top 5 effects
top_effects_data <- subset(service_alerts, effect_name %in% top_effects)
# Group and calculate the average severity code
average_severity <- top_effects_data %>%
group_by(effect_name) %>%
summarise(average_severity = mean(severity_code, na.rm = TRUE))
print(average_severity)
# Data for visualization
effect_data <- data.frame(
Effect_Name = c("Detour", "Delay", "Escalator Closure", "Elevator Closure", "Track Change"),
Severity_Code = c(6.33, 4.97, 2.99, 2.97, 1.65)
)
# Create the bar chart
ggplot(effect_data, aes(x = reorder(Effect_Name, -Severity_Code), y = Severity_Code, fill = Effect_Name)) +
geom_bar(stat = "identity") +
labs(title = "Top 5 Effect Names and Their Severity Code",
x = "Effect Name",
y = "Average Severity Code") +
theme_minimal()
service_alerts <- service_alerts %>%
mutate(notif_start = as.Date(notif_start),  # Convert notif_start to Date
month = floor_date(notif_start, "month"))  # Extract month for aggregation
# Top Alert Frequency
top_alert_types <- service_alerts %>%
count(effect_name) %>%
arrange(desc(n)) %>%
slice(1:5) %>%
pull(effect_name)
# Only Top Alerts
filtered_alerts <- service_alerts %>%
filter(effect_name %in% top_alert_types)
# Top Alert Count
monthly_alerts <- filtered_alerts %>%
group_by(month, effect_name) %>%
summarise(alert_count = n(), .groups = "drop")
# PAST 3 Years
start_date <- as.Date("2021-01-01")
monthly_alerts <- monthly_alerts %>% filter(month >= start_date)
#VIZ
ggplot(monthly_alerts, aes(x = month, y = alert_count, fill = effect_name)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Monthly Frequency of All Top Alert Types (Last 3 Years)",
x = "Month",
y = "Alert Frequency",
fill = "Alert Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
severity_type <- unique(service_alerts$alert_time_type)
severity_counts <- service_alerts %>%
count(alert_time_type, name = "frequency")
ggplot(severity_counts, aes(x = severity_type, y = frequency,  fill= severity_type))+
geom_bar(stat = "Identity", fill = "skyblue", color = "white") +
labs( title = "Count of Alert Time Type 2023", x = "Alter Time Type", y = "Count")+
scale_y_continuous(labels = scales::label_number()) +
theme_minimal()
View(service_alerts)
ggplot(severity_counts, aes(x = severity_type, y = frequency,  fill= severity_type))+
geom_bar(stat = "Identity", fill = "skyblue", color = "white") +
labs( title = "Count of Severity Type 2023", x = "Severity Type", y = "Count")+
scale_y_continuous(labels = scales::label_number()) +
theme_minimal()
